
/**
 *  ValidationPolicy.java
 *
 * Copyright 2017 President and Fellows of Harvard College
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author mole
 * @version $Id: $Id
 */
package org.datakurator.ffdq.model.needs;

import org.cyberborean.rdfbeans.annotations.RDF;
import org.cyberborean.rdfbeans.annotations.RDFBean;
import org.cyberborean.rdfbeans.annotations.RDFNamespaces;
import org.cyberborean.rdfbeans.annotations.RDFSubject;
import org.datakurator.ffdq.model.context.Validation;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

@RDFNamespaces({
        "bdqffdq = https://rs.tdwg.org/bdqffdq/terms/",
        "skos = http://www.w3.org/2004/02/skos/core#",
        "rdfs = http://www.w3.org/2000/01/rdf-schema#"
})
@RDFBean("bdqffdq:ValidationPolicy")
public class ValidationPolicy {
    private String id = "urn:uuid:" + UUID.randomUUID();

    private UseCase useCase;
    private List<Validation> validations;
    
    
    /**
     * <p>Constructor for ValidationPolicy.</p>
     */
    public ValidationPolicy() { 
    	init();
    }
    
    /**
     * <p>Constructor for ValidationPolicy.</p>
     *
     * @param id a {@link java.lang.String} object.
     * @param useCase a {@link org.datakurator.ffdq.model.needs.UseCase} object.
     */
    public ValidationPolicy(String id, UseCase useCase) { 
    	init();
    	this.setId(id);
    	this.setUseCase(useCase);
    }
    
    
    private void init()  {
    	validations = new ArrayList<Validation>();
    }

    /**
     * <p>addValidationx.</p>
     *
     * @param aValidation a {@link org.datakurator.ffdq.model.context.Validation} object.
     */
    public void addValidationx(Validation aValidation) { 
    }
    
    /**
     * <p>Getter for the field <code>id</code>.</p>
     *
     * @return a {@link java.lang.String} object.
     */
    @RDFSubject
    public String getId() {
        return id;
    }
    
    /**
     * Override the autogenerated UUID with a provided id for this policy.
     *
     * @param id the provided id to use, ignored if null or blank
     */
    public void setId(String id) {
    	if (id!=null && id.length()> 0) { 
    		this.id = id;
    	}
    }

    /**
     * <p>Getter for the field <code>useCase</code>.</p>
     *
     * @return a {@link org.datakurator.ffdq.model.needs.UseCase} object.
     */
    @RDF("bdqffdq:hasUseCase")
    public UseCase getUseCase() {
        return useCase;
    }

    /**
     * <p>Setter for the field <code>useCase</code>.</p>
     *
     * @param useCase a {@link org.datakurator.ffdq.model.needs.UseCase} object.
     */
    public void setUseCase(UseCase useCase) {
        this.useCase = useCase;
    }
    
    /*
     * Add a validation to the list of validations for this policy.
     */
    /**
     * <p>Getter for the field <code>validations</code>.</p>
     *
     * @return a {@link java.util.List} object.
     */
    @RDF("bdqffdq:includesInPolicy")
    public List<Validation> getValidations() {
        return validations;
    }

    /**
     * <p>addValidation.</p>
     *
     * @param aValidation a {@link org.datakurator.ffdq.model.context.Validation} object.
     */
    public void addValidation(Validation aValidation) {
    	validations.add(aValidation);
    }
    
    /**
     * <p>getLabel.</p>
     *
     * @return a generated label
     */
    @RDF("rdfs:label")
	public String getLabel() {
		StringBuilder labelBuilder = new StringBuilder();
		labelBuilder.append("ValidationPolicy: (");
		labelBuilder.append(validations.size()).append(") validations ");
//		Iterator<Validation> i = validations.iterator();
//		String separator = "";
//		while (i.hasNext()) { 
//			labelBuilder.append(separator).append(i.next().getLabel());
//			separator = ", ";
//		}
		labelBuilder.append(" in UseCase ");
		labelBuilder.append(useCase.getLabel());
		return labelBuilder.toString();
	}
    
    /**
     * Get the preferred label, currently, same as the rdfs;label.
     *
     * @return a skos:prefLabel
     */
    @RDF("skos:prefLabel") 
    public String getPrefLabel() { 
    	return getLabel();
    }
}
